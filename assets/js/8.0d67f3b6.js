(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{208:function(t,e,r){"use strict";r.r(e);var n=r(28),a=Object(n.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"开发工作流规范-基于-git"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#开发工作流规范-基于-git"}},[t._v("#")]),t._v(" 开发工作流规范 (基于 Git)")]),t._v(" "),r("h2",{attrs:{id:"版本规范"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#版本规范"}},[t._v("#")]),t._v(" 版本规范")]),t._v(" "),r("p",[t._v("前端项目使用"),r("a",{attrs:{href:"https://semver.org/lang/zh-CN/",target:"_blank",rel:"noopener noreferrer"}},[t._v("语义化版本"),r("OutboundLink")],1),t._v("进行发布，版本格式："),r("strong",[t._v("主版本号.次版本号.修订号")])]),t._v(" "),r("p",[t._v("版本号递增规则如下：")]),t._v(" "),r("ol",[r("li",[t._v("主版本号：\b\b项目大版本改造，主版本号会迭代，比如开放平台二期、鹊台二期；")]),t._v(" "),r("li",[t._v("次版本号：当开发一个 Redmine 常规需求时，次版本号升级；")]),t._v(" "),r("li",[t._v("修订号：对已上线的分支，进行修复时，次版本号升级；")])]),t._v(" "),r("h2",{attrs:{id:"工作流规范"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#工作流规范"}},[t._v("#")]),t._v(" 工作流规范")]),t._v(" "),r("p",[t._v("涉及多人并发协作，管理多个软件版本的情况下，定义良好的版本库管理规范，可以让大型项目更有组织性，也可以提高成员协作效率。")]),t._v(" "),r("p",[t._v("因为我们需要多人协作的方式，所以我们工作流是遵循的 Git-Flow；但是大部分团队会根据自己的情况制定自己的 Git 工作流规范，例如 Java 组的规范就跟前端组不一样。")]),t._v(" "),r("p",[t._v("所以我建议了解两种标准规范方式即可：")]),t._v(" "),r("ol",[r("li",[r("a",{attrs:{href:"https://github.com/ivan-94/git-guide/blob/master/branch/feature.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git-Flow 工作流"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ivan-94/git-guide/blob/master/branch/fork.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub-Fork 工作流"),r("OutboundLink")],1)])]),t._v(" "),r("h2",{attrs:{id:"消息规范"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#消息规范"}},[t._v("#")]),t._v(" 消息规范")]),t._v(" "),r("p",[t._v("我们严格准守 "),r("a",{attrs:{href:"https://github.com/angular/angular/blob/master/CONTRIBUTING.md#commit",target:"_blank",rel:"noopener noreferrer"}},[t._v("AngularJS"),r("OutboundLink")],1),t._v(" 提交规范。一个好的提交信息，可以提高项目的整体质量，所以至少具有下面这些优点：")]),t._v(" "),r("ul",[r("li",[t._v("格式统一的提交信息有助于自动化生成 CHANGELOG")]),t._v(" "),r("li",[t._v("版本库不只是存放代码的仓库，它记录项目的开发日志，要清晰表达这次提交的做了什么。这些记录应该可以帮助后来者快速地学习和回顾代码，也应该方便其他协作者 Review 你的代码；")]),t._v(" "),r("li",[t._v("规范化提交信息可以促进提交者提交有意义的。")])]),t._v(" "),r("p",[t._v("下面这些工具可以帮助你检验提交信息和生成 CHANGELOG:")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/conventional-changelog/conventional-changelog",target:"_blank",rel:"noopener noreferrer"}},[t._v("conventional-changelog"),r("OutboundLink")],1),t._v(" 从项目的提交信息中生成CHANGELOG和发布信息")]),t._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/conventional-changelog/commitlint",target:"_blank",rel:"noopener noreferrer"}},[t._v("commitLint"),r("OutboundLink")],1),t._v(" - 检验提交信息")]),t._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/commitizen/cz-cli",target:"_blank",rel:"noopener noreferrer"}},[t._v("commitizen"),r("OutboundLink")],1),t._v(" - 提交规范帮助工具")])]),t._v(" "),r("p",[t._v("如果你遵循上面的规范，就可以利用"),r("a",{attrs:{href:"https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-cli",target:"_blank",rel:"noopener noreferrer"}},[t._v("conventional-changelog-cli"),r("OutboundLink")],1),t._v("来自动生成变更日志。")]),t._v(" "),r("h2",{attrs:{id:"学习资料"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#学习资料"}},[t._v("#")]),t._v(" 学习资料")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://www.cnblogs.com/wubaiqing/p/10307605.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("《Git Commit 标准化》"),r("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=a.exports}}]);